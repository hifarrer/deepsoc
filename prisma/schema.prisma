// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password auth
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  searches Search[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Search {
  id          String   @id @default(cuid())
  keyword     String
  status      String   @default("pending") // pending, running, completed, failed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // User relationship
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Apify run IDs
  twitterRunId    String?
  redditRunId     String?
  tiktokRunId     String?
  instagramRunId  String?
  
  // Results
  twitterResults  TwitterResult[]
  redditResults   RedditResult[]
  tikTokResults   TikTokResult[]
  facebookResults FacebookResult[]
  instagramResults InstagramResult[]
  youtubeResults  YouTubeResult[]
  
  @@map("searches")
}

model TwitterResult {
  id          String   @id @default(cuid())
  searchId    String
  search      Search   @relation(fields: [searchId], references: [id], onDelete: Cascade)
  
  // Tweet data
  tweetId     String
  url         String
  text        String
  fullText    String?
  tweetCreatedAt String   // Twitter's createdAt format
  lang        String?
  
  // Metrics
  retweetCount Int     @default(0)
  replyCount   Int     @default(0)
  likeCount    Int     @default(0)
  quoteCount   Int     @default(0)
  viewCount    Int?
  bookmarkCount Int    @default(0)
  
  // Author data
  authorId       String
  authorName     String
  authorUsername String
  authorVerified Boolean @default(false)
  authorAvatar   String?
  authorFollowers Int?
  authorFollowing Int?
  
  // Media
  mediaUrls     String[] // Array of image URLs
  
  // Metadata
  isReply       Boolean @default(false)
  isRetweet     Boolean @default(false)
  isQuote       Boolean @default(false)
  
  createdAt     DateTime @default(now())
  
  @@map("twitter_results")
}

model RedditResult {
  id          String   @id @default(cuid())
  searchId    String
  search      Search   @relation(fields: [searchId], references: [id], onDelete: Cascade)
  
  // Post/Community data
  redditId    String
  dataType    String   // "post" or "community"
  title       String?
  text        String?
  url         String
  subreddit   String?
  
  // Author data
  authorId    String?
  authorName  String?
  authorAvatar String?
  
  // Metrics
  score       Int?
  upvoteRatio Float?
  numComments Int?
  
  // Media
  mediaUrls   String[] // Array of image URLs
  
  // Metadata
  createdAt   String?  // Reddit's created_utc
  scrapedAt   DateTime @default(now())
  
  @@map("reddit_results")
}

model TikTokResult {
  id          String   @id @default(cuid())
  searchId    String
  search      Search   @relation(fields: [searchId], references: [id], onDelete: Cascade)
  
  // Video data
  videoId     String
  text        String?
  textLanguage String?
  url         String?
  
  // Author data
  authorId       String
  authorName     String
  authorNickname String?
  authorVerified Boolean @default(false)
  authorAvatar   String?
  authorFollowers Int?
  authorFollowing Int?
  authorFans     Int?
  authorHeart    Int?
  
  // Video metrics
  playCount      Int?
  diggCount      Int?
  shareCount     Int?
  commentCount   Int?
  
  // Media
  coverUrl       String?
  videoUrl       String?
  
  // Metadata
  createTime     Int?     // Unix timestamp
  createTimeISO  String?  // ISO format
  isAd           Boolean @default(false)
  createdAt      DateTime @default(now())
  
  @@map("tiktok_results")
}

model FacebookResult {
  id          String   @id @default(cuid())
  searchId    String
  search      Search   @relation(fields: [searchId], references: [id], onDelete: Cascade)
  
  // Post data
  postId      String
  text        String?
  url         String
  hashtags    String[] // Array of hashtags
  
  // Author data
  authorId    String?
  authorName  String?
  authorUrl   String?
  
  // Metrics
  viewsCount  Int?
  likesCount  Int?
  commentsCount Int?
  shareCount  Int?
  
  // Media
  thumbnailUrl String?
  
  // Metadata
  createdAt   DateTime @default(now())
  
  @@map("facebook_results")
}

model InstagramResult {
  id          String   @id @default(cuid())
  searchId    String
  search      Search   @relation(fields: [searchId], references: [id], onDelete: Cascade)
  
  // Post data
  postId      String
  text        String?
  url         String
  hashtags    String[] // Array of hashtags
  
  // Author data
  authorId    String?
  authorName  String?
  authorUrl   String?
  authorAvatar String?
  
  // Metrics
  viewsCount  Int?
  likesCount  Int?
  commentsCount Int?
  shareCount  Int?
  
  // Media
  thumbnailUrl String?
  
  // Metadata
  createdAt   DateTime @default(now())
  
  @@map("instagram_results")
}

model YouTubeResult {
  id          String   @id @default(cuid())
  searchId    String
  search      Search   @relation(fields: [searchId], references: [id], onDelete: Cascade)
  
  // Video data
  videoId     String
  title       String?
  text        String?
  url         String
  hashtags    String[] // Array of hashtags
  
  // Author data
  authorId    String?
  authorName  String?
  authorUrl   String?
  
  // Metrics
  viewsCount  Int?
  likesCount  Int?
  commentsCount Int?
  
  // Media
  thumbnailUrl String?
  
  // Metadata
  createdAt   DateTime @default(now())
  
  @@map("youtube_results")
}